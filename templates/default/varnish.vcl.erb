
<% if node['varnish']['GeoIP_enabled'] %>
include "/etc/varnish/geoip.vcl";
<% end %>

# Create a health check to verify that the backend server is responding
# correctly and in a timely manner.
probe healthcheck {
   .request =
         "GET /LICENSE.txt HTTP/1.1"
         "Host: <%= @magento[:apache][:servername] %>"
         "Connection: close";
   .interval = 120s;
   .timeout = 90s; # High values due to expected slow responses
   .window = 8;
   .threshold = 3;
   .initial = 3;
   #.expected_response = 200; # Still want the Magento maintenance page to display so no response code check
}
# Setup a list of backend servers. If you are installing Varnish on each server
# then the backend list will only include localhost. If your using a setting up Varnish
# as a load balancer you will have a list of each of the backend servers.
<% @magento['varnish']['backend_servers'].each do |server| %>
backend <%= server[:name] %> {
    .host = "<%= server[:ip] %>";
    .port = "<%= @magento['apache']['unsecure_port'] %>";
    .connect_timeout = 240s; # High values due to expected slow responses
    .first_byte_timeout = 240s; # High values due to expected slow responses
    .between_bytes_timeout = 240s; # High values due to expected slow responses
    .probe = healthcheck;
}
<% end %>

# Create a backend Director to implement load balancing across
# the list of servers. This can have a value of "round-robin" or "random"
director backend_director <%= @magento['varnish']['director_strategy'] %> {
    <% if @magento['varnish']['director_strategy'] == 'random' %>
    .retries = 5;
    <% @magento['varnish']['backend_servers'].each do |server| %>
    { .backend = <%= server[:name] %>; .weight = 1; }
    <% end %>
    <% else %>
    <% @magento['varnish']['backend_servers'].each do |server| %>
    { .backend = <%= server[:name] %>; }
    <% end %>
    <% end %>
}
# In order to protect access to the Varnish administration we will
# limit the purge requests to a list of trusted servers. This is the public
# IP of any server that will initiate the purge requests.
acl purge {
  <% @magento['varnish']['trusted_servers'].each do |server| %>
  "<%= server %>";
  <% end %>
}

sub vcl_recv {
    set req.backend = backend_director;

    if (req.restarts == 0) {
        if (req.http.x-forwarded-for) {
            set req.http.X-Forwarded-For =
            req.http.X-Forwarded-For + ", " + client.ip;
        } else {
            set req.http.X-Forwarded-For = client.ip;
        }
        <% if node['varnish']['GeoIP_enabled'] %>
        if (req.url !~ "\.(jpeg|jpg|png|gif|ico|swf|js|css|gz|rar|txt|bzip|pdf)(\?.*|)$") {
            C{
                vcl_geoip_country_set_header(sp);
            }C
        }
        <% end %>
    }

    if (req.request == "PURGE") {
        # Allow only purge requests from trusted servers
        if (!client.ip ~ purge) {
            error 405 "Not allowed.";
        }
        ban("obj.http.x-url ~ " + req.url);
        return (lookup);
    }

    # Do not cache none standard HTTP verbs
    # We should not cache any page for Magento admin interface or for routes that absolutely
    # need to send Set-Cookie HTTP headers.
    if (req.request != "GET" &&
        req.request != "HEAD" &&
        req.request != "PUT" &&
        req.request != "POST" &&
        req.request != "TRACE" &&
        req.request != "OPTIONS" &&
        req.request != "DELETE") {
            return (pipe);
    }

    if (req.url ~ "^/(index.php/)?(<%= @magento['app']['admin_frontname'] %>|api|directory)" || req.url ~ "\?(.*&)*(___store=|SID=[a-zA-Z0-9]{16,})" || req.http.Cookie ~ "adminhtml") {
            return (pipe);
    }

    if (req.backend.healthy) {
        set req.grace = 30s;
    } else {
        set req.grace = 60s;
    }

    # Set a HTTP header so the server knows we can process ESI
    set req.http.Surrogate-Capability = "magento=ESI/1.0";

    # Any content that is being served behind HTTP Basic auth will not be cached.
    # Cache only GET or HEAD requests
    if (req.http.Authorization ||
        (req.request != "GET" && req.request != "HEAD")) {
            return (pass);
    }

    # Ajax request for varnish csi will not be cached
    if (req.http.X-Requested-With == "XMLHttpRequest" && req.url ~ "^/(index.php/)?(varnish)") {
        return (pass);
    }
    # StoreSwitcher requests, used to transfer session id to another domain
    if (req.url ~ "^/(index.php/)?varnish/storeswitcher") {
        return (pass);
    }

    # Even though there are few possible values for Accept-Encoding, Varnish treats
    # them literally rather than semantically, so even a small difference which makes
    # no difference to the backend can reduce cache efficiency by making Varnish cache
    # too many different versions of an object.
    # http://varnish.projects.linpro.no/wiki/FAQ/Compression
    if (req.http.Accept-Encoding) {
        if (req.url ~ "\.(jpg|png|gif|gz|tgz|bz2|tbz|mp3|ogg|swf|flv)$") {
            # No point in compressing these
            remove req.http.Accept-Encoding;
        } elsif (req.http.Accept-Encoding ~ "gzip") {
            set req.http.Accept-Encoding = "gzip";
        } elsif (req.http.Accept-Encoding ~ "deflate" && req.http.user-agent !~ "MSIE") {
            set req.http.Accept-Encoding = "deflate";
        } else {
            # unkown algorithm
            remove req.http.Accept-Encoding;
        }
    }

    # Rules for static files
     if (req.url ~ "\.(jpeg|jpg|png|gif|ico|swf|js|css|gz|rar|txt|bzip|pdf)(\?.*|)$") {
        set req.http.staticmarker = "1";
        unset req.http.Https;
        unset req.http.Cookie;

        return (lookup);
    }

    # We should not cache any page for checkout and customer modules
    # @TODO With the completed CSI this should no longer be the case
    if (req.url ~ "^/(index.php/)?(checkout|onestepcheckout|customer|catalog/product_compare|wishlist|postcode|staging)") {
        return (pass);
    }

    # Unique Cookie identifier which tells Varnish if it should use cache or not
    if (req.http.Cookie ~ "(nocache_stable|nocache)") {
        return (pass);
    }

    # Remove Google gclid parameters to minimize the cache objects
    set req.url = regsuball(req.url,"\?gclid=[^&]+$",""); # strips when QS = "?gclid=AAA"
    set req.url = regsuball(req.url,"\?gclid=[^&]+&","?"); # strips when QS = "?gclid=AAA&foo=bar"
    set req.url = regsuball(req.url,"&gclid=[^&]+",""); # strips when QS = "?foo=bar&gclid=AAA" or QS = "?foo=bar&gclid=AAA&bar=baz"

    # Remove has_js and Google Analytics __* cookies.
    # set req.http.Cookie = regsuball(req.http.Cookie, "(^|;\s*)(__[a-z]+|has_js)=[^;]*", "");

    # Remove all cookies except those used for Currency and Language stores.
    # This prevents customer specific caching but allows the selection of language and currency to
    # create a new version of the cached page.
    if (req.http.Cookie) {
        set req.http.Cookie = ";" + req.http.Cookie;
        set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
        set req.http.Cookie = regsuball(req.http.Cookie, ";(<%= node['varnish']['cookies'].join("|") %>)=", "; \1=");
        set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
        set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");

        if (req.http.Cookie == "") {
            remove req.http.Cookie;
        }
    }

    set req.http.X-Cookie = req.http.Cookie;

    set req.http.magicmarker = 1;

    return (lookup);
}

# Called after a cache lookup if the req. document was found in the cache.
sub vcl_hit {
    if (req.request == "PURGE") {
        purge;
        error 200 "Purged";
    }

    return (deliver);
}

# Called after a cache lookup and odc was not found in cache.
sub vcl_miss {
    if (req.request == "PURGE"){
        error 200 "Not in cache";
    }

    return (fetch);
}

# Add X-Cookie value to the hash to create unique caching combinations, this is limited to only the Magento cookies that
# are used for content features such as Currency selection and Language.
sub vcl_hash {
    hash_data(req.url);
    if (req.http.host) {
        hash_data(req.http.host);
    } else {
        hash_data(server.ip);
    }
    if (req.http.X-Cookie && req.http.magicmarker) {
        hash_data(req.http.X-Cookie);
    }
    <% if node['varnish']['GeoIP_enabled'] %>
    hash_data(req.http.X-Geo-IP-Country);
    <% end %>
    return (hash);
}

# Called after document was retreived from backend
sub vcl_fetch {
    # Homogenize the User-Agent vary
    if (beresp.http.Vary ~ "User-Agent") {
        set beresp.http.X-Vary = regsub(beresp.http.Vary, ",?\s?User-Agent,?", "\1");
    }

    # the site is in the maintenance mode
    if (beresp.status == 503) {
        set beresp.ttl = 1s;
        return (deliver);
    }

    # These status codes should always pass through and never cache.
    if (beresp.status >= 500) {
        set beresp.grace = 60s;
        if (req.restarts < 3) {
            return (restart);
        }
        return (deliver);
    }

    # Backend response includes ESI tags
    if (beresp.http.Surrogate-Control ~ "ESI/1.0") {
        set beresp.do_esi = true;
        set beresp.http.X-ESI = "true";
    }

    if (req.request != "GET" && req.request != "HEAD") {
        # We only deal with GET and HEAD by default
        return (deliver);
    }
    if (req.http.magicmarker) {
        unset beresp.http.magicmarker;
    }

    if (req.http.staticmarker) {
        unset beresp.http.staticmarker;
        # Force caching for static files
        set beresp.ttl = <%= @magento['varnish']['ttl_for_static_files'] %>;
        if (beresp.status >= 400) {
            # Broken or missing static files should only be cached
            # for a short time but if they remain broken the exiting
            # cached object should still be used
            set beresp.ttl = 30m;
            set beresp.grace = 60s;
            if (req.restarts < 3) {
                return (restart);
            }
        }
    }

    if (req.http.Cookie ~ "(nocache_stable|nocache)") {
        set beresp.http.X-Cacheable = "NO:Cart or Message present";

        return(hit_for_pass);
    } elseif (beresp.http.Cache-Control ~ "private") {
        # You are respecting the Cache-Control=private header from the backend
        set beresp.http.X-Cacheable = "NO:Cache-Control=private";
        set beresp.ttl = 60s;
        return(hit_for_pass);
    } elseif (beresp.ttl <= 0s) {
        set beresp.http.X-Cacheable = "NO";
        set beresp.ttl = 60s;
        return(hit_for_pass);
    } else {
        # Varnish determined the object was cacheable
        remove beresp.http.Set-Cookie;
        remove beresp.http.Pragma;

        set beresp.http.X-Cacheable = "YES";
    }

    return (deliver);
}

# Called after a cached document is delivered to the client.
sub vcl_deliver {
    unset resp.http.Vary;
    if (resp.http.X-Vary) {
        set resp.http.Vary = resp.http.X-Vary;
    }
    # Set a cache header to allow us to inspect the response
    # headers during testing
    if (resp.http.X-Cache-Debug ~ "debug") {
        # Set a cache header to allow us to inspect the response
        # headers during testing
        set resp.http.X-Cookie = req.http.X-Cookie;
        set resp.http.X-Varnish-ID = req.xid;
        set resp.http.X-Varnish-ESI-Level = req.esi_level;
        set resp.http.X-Cache-Debug-URL = req.url;
        if (obj.hits > 0) {
            set resp.http.X-Cache = "HIT";
            set resp.http.X-Cache-Hits = obj.hits;
        } else {
            set resp.http.X-Cache = "MISS";
        }
    } else {
        unset resp.http.Age;
        unset resp.http.Via;
        unset resp.http.Server;
        unset resp.http.X-Cacheable;
        unset resp.http.X-Cookie;
        unset resp.http.X-ESI;
        unset resp.http.X-Powered-By;
        unset resp.http.X-Varnish;
        unset resp.http.X-Vary;
        unset resp.http.Surrogate-Control;
    }

    return (deliver);
}
